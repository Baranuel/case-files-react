/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LobbyIndexImport } from './routes/lobby/index'
import { Route as LobbyUserIdImport } from './routes/lobby/$userId'
import { Route as BoardBoardIdImport } from './routes/board/$boardId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LobbyIndexRoute = LobbyIndexImport.update({
  id: '/lobby/',
  path: '/lobby/',
  getParentRoute: () => rootRoute,
} as any)

const LobbyUserIdRoute = LobbyUserIdImport.update({
  id: '/lobby/$userId',
  path: '/lobby/$userId',
  getParentRoute: () => rootRoute,
} as any)

const BoardBoardIdRoute = BoardBoardIdImport.update({
  id: '/board/$boardId',
  path: '/board/$boardId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/board/$boardId': {
      id: '/board/$boardId'
      path: '/board/$boardId'
      fullPath: '/board/$boardId'
      preLoaderRoute: typeof BoardBoardIdImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$userId': {
      id: '/lobby/$userId'
      path: '/lobby/$userId'
      fullPath: '/lobby/$userId'
      preLoaderRoute: typeof LobbyUserIdImport
      parentRoute: typeof rootRoute
    }
    '/lobby/': {
      id: '/lobby/'
      path: '/lobby'
      fullPath: '/lobby'
      preLoaderRoute: typeof LobbyIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/board/$boardId': typeof BoardBoardIdRoute
  '/lobby/$userId': typeof LobbyUserIdRoute
  '/lobby': typeof LobbyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/board/$boardId': typeof BoardBoardIdRoute
  '/lobby/$userId': typeof LobbyUserIdRoute
  '/lobby': typeof LobbyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/board/$boardId': typeof BoardBoardIdRoute
  '/lobby/$userId': typeof LobbyUserIdRoute
  '/lobby/': typeof LobbyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/board/$boardId' | '/lobby/$userId' | '/lobby'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/board/$boardId' | '/lobby/$userId' | '/lobby'
  id: '__root__' | '/' | '/board/$boardId' | '/lobby/$userId' | '/lobby/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BoardBoardIdRoute: typeof BoardBoardIdRoute
  LobbyUserIdRoute: typeof LobbyUserIdRoute
  LobbyIndexRoute: typeof LobbyIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BoardBoardIdRoute: BoardBoardIdRoute,
  LobbyUserIdRoute: LobbyUserIdRoute,
  LobbyIndexRoute: LobbyIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/board/$boardId",
        "/lobby/$userId",
        "/lobby/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/board/$boardId": {
      "filePath": "board/$boardId.tsx"
    },
    "/lobby/$userId": {
      "filePath": "lobby/$userId.tsx"
    },
    "/lobby/": {
      "filePath": "lobby/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
